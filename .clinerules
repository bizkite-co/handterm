---
date: 2025-01-01
title: Cline Rules
version: 1.0.0
---
* USE SPACES INSTEAD OF TABS.
* DON'T FIX LINTING ERRORS UNTIL ALL TESTS PASS.
* Read linting errors and _avoid making new_ linting errors, but don't fix existing linting errors until all tests pass.

* USE `logging` instead of `print`.
* Prefer unit tests over logging wherever possible.
* Try to limit file size to about 100 lines.
    * If they go over that size, parse functions out to other files.
* use the repo remote address `github.com:bizkite-co/handterm` to determine the repo name and owner.
* Use the GitHub MCP to read, add, and update GitHub issues on this repo.
* Comments on progress should be added as comments on the Issue, not as edits to the issue.
* Be sure to set the Issue Type: [Featur, Bug, Task], depending on it's type.
* Add the issues to the "Handterm" project with `--owner bizkite-co`.
* Add the Issue to the project by switching to Code mode and executing a command of this format:
    `gh project item-add 4 --url https://github.com/bizkite-co/handterm/issues/<issue number> --owner bizkite-co`

* Use the GitHub CLI for GitHub actions not available in the MCP.
* When the Issue is complete and the user agrees, create commit with a multi-line commit message starting with `fix #<issue number> <issue title>`. That will close the issue.

* Use industry standard best practice coding standards and file structure and naming conventions.
* Break problems down into smaller problems until you can find the tiny problem that's causeing the bigger problems.


1. Make sure any commands you execute return control of the terminl.
2. Prefer creating a new test or assertion, instead of debug logging.
   1. Testing is more robust than debug logging because it can be run at design time and doesn't need to be removed.
   2. Try to only add logging for long-term resiliency checks, not for short-term troubleshooting.
3. Tests aren't tests until you run the test. Test files are not the actual test. The test is when you run the test file.
4. âœ“ Run the test after you edit the test code.
5. If any tests are dificult to resolve, break them down to test smaller prerequisites of the larger test.
   1. For intance, if you have an failing end-to-end test that involves persisting data, create a test that only tests writing the data and another test that only tests reading the data.
6. Do not run commands that remain attached. If you're unsure, pipe the output to a `temp` file and grep the file.
   1. For instance, you can run a command like this: `git diff 9a487aa3bc01e0981ee9d43151dcd5bcb9c389b3 HEAD -- src/components/MonacoEditor.tsx > temp/monaco_9a487aa3bc01e0981ee9d43151dcd5bcb9c389b3_HEAD.diff`, and then `grep` or `cat` or `tail` or `head` the file, depending on what you need from it.
7. Read `CONVENTIONS.md` at the start of each chat.
8. Read `./.eslintrc.cjs` and follow the rules. Avoid creating warnings.
    a. For instance, don't violate `eslint@typescript-eslint/strict-boolean-expressions` when writing code.
9. Use a `./docs/worklog/` directory for all planning and worklog purposes.
    1. If the user passes you a `./docs/worklog/` directory, use that directory for all planning and worklog purposes.
    2. If the user does not pass you a `./docs/worklog/` directory, create a worklog file starting with todays date in the name in `./docs/worklog/`.
    3. Use the `date-server` MCP server to get the current date.
    4. State the task you are working on.
    5. State your understanding of the problem.
    6. State your plan to solve the problem.
    7. State your next steps.
    8. Add `// TODO:` comments to your code to indicate the changes that need to be made and the plan document that describes the change.
    9. Implement your next step in code while observing the linting rules and warnings.
    10. Whenever you create a measurable improvement, commit the change with a multi-line commit message.
    11. If you are stuck, state your current problem and ask for help.
    12. Perioically review your last three comments to make sure you're not stuck in a non-productive loop.
10. Assume 'npm run dev' is already running and available at `http://localhost:5173/`.
11. DO NOT RUN `npm run dev`. You can assume it is already running.